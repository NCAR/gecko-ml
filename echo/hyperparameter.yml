log:
  save_path: "test/log.txt"

slurm:
  jobs: 2
  kernel: "ncar_pylib /glade/work/schreck/py37"
  bash: ["module load ncarenv/1.3 gnu/8.3.0 openmpi/3.1.4 python/3.7.5 cuda/10.1"]
  batch:
    account: "NAML0001"
    gres: "gpu:v100:1"
    mem: "64G"
    x: "casper36"
    n: 8
    t: "01:00:00"
    J: "gecko_echo" #hehe
    o: "hyper_opt.out"
    e: "hyper_opt.err"
    
optuna:
  study_name: "gecko"
  storage: "sqlite:///test/gecko.db"
  #storage: "mysql://schreck:l3tm31n@thunder.ucar.edu/optuna"
  reload: 0
  objective: "/glade/work/cbecker/gecko-ml/objective.py"
  direction: "minimize"
  metric: "box_mae"
  n_trials: 10
  gpu: True
  save_path: 'test'
  sampler:
    type: "TPESampler"
    n_startup_trials: 100
  parameters:
#     dense_network:hidden_layers:
#       type: "int"
#       settings:
#         name: "hidden_layers"
#         low: 1
#         high: 2
    dense_network:hidden_neurons:
      type: "int"
      settings:
        name: "hidden_neurons"
        low: 50
        high: 1000
    dense_network:lr:
      type: "loguniform"
      settings:
        name: "lr"
        low: 0.00000001
        high: 0.1
    dense_network:l1_weight:
      type: "loguniform"
      settings:
        name: "l1_weight"
        low: 1.0e-12
        high: 0.1
    dense_network:l2_weight:
      type: "loguniform"
      settings:
        name: "l2_weight"
        low: 1.0e-12
        high: 0.1
#    dense_network:batch_size:
#      type: "int"
#      settings:
#        name: "batch_size"
#        low: 128
#        high: 16384
#    dense_network:dropout_alpha:
#      type: "float"
#      settings:
#        name: "dropout_alpha"
#        low: 0.0
#        high: 0.9
#    dense_network:activation:
#      type: "categorical"
#      settings:
#        name: "activation"
#        choices: ["relu", "leaky", "selu", "elu", "prelu"]
#    dense_network:loss:
#      type: "categorical"
#      settings:
#        name: "loss"
#        choices: [["Xsigmoid"], ["Xtanh"], ["mae"], ["mse"], ["log_cosh"], ["mean_squared_logarithmic_error"], ["poisson"], ["huber"]]
#    dense_network:optimizer:
#      type: "categorical"
#      settings:
#        name: "optimizer"
#        choices: ["adam", "sgd", "RMSprop", "Adadelta", "Adagrad", "Adamax", "Nadam"]
#    scaler_type:
#      type: "categorical"
#      settings:
#        name: "scaler_type"
#        choices: ["MinMaxScaler", "StandardScaler"]
#    dense_network:output_activation:
#      type: "categorical"
#      settings:
#        name: "output_activation"
#        choices: ["linear", "lambda:100", "lambda:10", "lambda:1", "lambda:0.1", "lambda:0.01"]
#
#[["mae"], ["mse"], ["log_cosh"], ["mean_squared_logarithmic_error"], ["poisson"], ["huber"], ["Xsigmoid"], ["Xtanh"]]
        
        
#     dense_network:custom_activation_decay_rate:
#       type: "loguniform"
#       settings:
#         name: "custom_activation_decay_rate"
#         low: 1.0e-03
#         high: 1000

#     dense_network:epsilon:
#       type: "loguniform"
#       settings:
#         name: "epsilon"
#         low: 0.000000001
#         high: 0.1
#     dense_network:epochs:
#       type: "int"
#       settings:
#         name: "epochs"
#         low: 500
#         high: 5000
#     precursor_weight:
#       type: "loguniform"
#       settings:
#         name: "precursor_weight"
#         low: 0.1
#         high: 100
#     gas_weight:
#       type: "loguniform"
#       settings:
#         name: "gas_weight"
#         low: 0.1
#         high: 100
#     aerosol_weight:
#       type: "loguniform"
#       settings:
#         name: "aerosol_weight"
#         low: 0.1
#         high: 100


